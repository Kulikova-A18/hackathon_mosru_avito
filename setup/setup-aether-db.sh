#!/bin/bash

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å sudo –ø—Ä–∞–≤–∞–º–∏."
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
check_os() {
    if [[ ! -f /etc/os-release ]]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux"
        exit 1
    fi
    
    source /etc/os-release
    if [[ "$ID" != "ubuntu" && "$ID" != "debian" ]]; then
        log_warn "–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ Ubuntu/Debian. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã..."
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL
install_postgresql() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
    sudo apt update && sudo apt upgrade -y
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL..."
    sudo apt install postgresql postgresql-contrib -y
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL..."
    sudo systemctl status postgresql --no-pager
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    local db_name="aether_ui_db"
    local db_user="aether_user"
    local db_password="aether_password_073"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    sudo -u postgres psql -c "CREATE USER $db_user WITH PASSWORD '$db_password';" 2>/dev/null || log_warn "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    sudo -u postgres psql -c "CREATE DATABASE $db_name WITH OWNER $db_user;" 2>/dev/null || log_warn "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $db_name TO $db_user;"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
    PG_HBA_CONF=$(sudo find /etc/postgresql -name "pg_hba.conf" | head -1)
    if [[ -n "$PG_HBA_CONF" ]]; then
        sudo sed -i '/aether_user/d' "$PG_HBA_CONF"  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        echo "host    $db_name    $db_user     127.0.0.1/32           md5" | sudo tee -a "$PG_HBA_CONF"
        echo "host    $db_name    $db_user     ::1/128                md5" | sudo tee -a "$PG_HBA_CONF"
    else
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª pg_hba.conf"
        exit 1
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    PG_CONF=$(sudo find /etc/postgresql -name "postgresql.conf" | head -1)
    if [[ -n "$PG_CONF" ]]; then
        sudo sed -i "s/^#listen_addresses = .*/listen_addresses = 'localhost,127.0.0.1'/" "$PG_CONF"
    fi
    
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL..."
    sudo systemctl restart postgresql
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã
    create_schema "$db_name" "$db_user" "$db_password"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    save_config "$db_name" "$db_user" "$db_password"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_schema() {
    local db_name=$1
    local db_user=$2
    local db_password=$3
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª
    cat > /tmp/create_aether_schema.sql << 'EOF'
-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
CREATE TABLE IF NOT EXISTS ui_components (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    type VARCHAR(50) NOT NULL,
    schema JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü
CREATE TABLE IF NOT EXISTS screens (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    version INTEGER DEFAULT 1,
    config JSONB NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
CREATE TABLE IF NOT EXISTS screen_versions (
    id SERIAL PRIMARY KEY,
    screen_id INTEGER REFERENCES screens(id) ON DELETE CASCADE,
    version INTEGER NOT NULL,
    config JSONB NOT NULL,
    created_by VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(screen_id, version)
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
CREATE TABLE IF NOT EXISTS templates (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    config JSONB NOT NULL,
    is_shared BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è A/B —Ç–µ—Å—Ç–æ–≤
CREATE TABLE IF NOT EXISTS ab_tests (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    screen_id INTEGER REFERENCES screens(id),
    variant_a JSONB NOT NULL,
    variant_b JSONB NOT NULL,
    traffic_split DECIMAL(3,2) DEFAULT 0.5,
    is_active BOOLEAN DEFAULT false,
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
CREATE TABLE IF NOT EXISTS analytics_events (
    id BIGSERIAL PRIMARY KEY,
    event_type VARCHAR(50) NOT NULL,
    screen_id INTEGER REFERENCES screens(id),
    element_id VARCHAR(100),
    user_id VARCHAR(100),
    session_id VARCHAR(100),
    platform VARCHAR(20),
    properties JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_screens_slug ON screens(slug);
CREATE INDEX IF NOT EXISTS idx_screens_active ON screens(is_active) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_screens_config ON screens USING gin(config);
CREATE INDEX IF NOT EXISTS idx_analytics_events_screen ON analytics_events(screen_id, event_type);
CREATE INDEX IF NOT EXISTS idx_analytics_events_created_at ON analytics_events(created_at);
CREATE INDEX IF NOT EXISTS idx_ab_tests_active ON ab_tests(is_active) WHERE is_active = true;

-- –§—É–Ω–∫—Ü–∏—è –∏ —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_screens_updated_at ON screens;
CREATE TRIGGER update_screens_updated_at BEFORE UPDATE ON screens
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
INSERT INTO ui_components (name, type, schema) VALUES
('button', 'action', '{"type": "object", "properties": {"text": {"type": "string"}, "action": {"type": "string"}, "style": {"type": "string", "enum": ["primary", "secondary"]}}}'),
('text', 'display', '{"type": "object", "properties": {"content": {"type": "string"}, "size": {"type": "string", "enum": ["small", "medium", "large"]}, "color": {"type": "string"}}}'),
('image', 'media', '{"type": "object", "properties": {"url": {"type": "string"}, "width": {"type": "number"}, "height": {"type": "number"}, "alt": {"type": "string"}}}'),
('container', 'layout', '{"type": "object", "properties": {"direction": {"type": "string", "enum": ["row", "column"]}, "children": {"type": "array"}}}')
ON CONFLICT (name) DO NOTHING;

-- –î–µ–º–æ-—ç–∫—Ä–∞–Ω
INSERT INTO screens (name, slug, config) VALUES (
    'Demo Home Screen',
    'demo-home',
    '{
        "type": "container",
        "direction": "column",
        "children": [
            {
                "type": "text",
                "id": "welcome_text",
                "content": "Welcome to THE LAST SIBERIA UI!",
                "size": "large"
            },
            {
                "type": "button",
                "id": "demo_button",
                "text": "Click me!",
                "style": "primary",
                "action": "navigate_to_details"
            }
        ]
    }'::JSONB
) ON CONFLICT (slug) DO NOTHING;
EOF

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É
    PGPASSWORD=$db_password psql -h 127.0.0.1 -U "$db_user" -d "$db_name" -f /tmp/create_aether_schema.sql
    
    # –û—á–∏—Å—Ç–∫–∞
    rm -f /tmp/create_aether_schema.sql
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
save_config() {
    local db_name=$1
    local db_user=$2
    local db_password=$3
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    cat > aether-db.env << EOF
# THE LAST SIBERIA UI Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=$db_name
DB_USER=$db_user
DB_PASSWORD=$db_password
DB_URL=jdbc:postgresql://localhost:5432/$db_name

# –î–ª—è Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/$db_name
SPRING_DATASOURCE_USERNAME=$db_user
SPRING_DATASOURCE_PASSWORD=$db_password
EOF

    # –°–æ–∑–¥–∞–µ–º .env –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    cat > .env << EOF
DB_HOST=localhost
DB_PORT=5432
DB_NAME=$db_name
DB_USER=$db_user
DB_PASSWORD=$db_password
EOF

    chmod 600 aether-db.env .env
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
verify_installation() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    source .env 2>/dev/null || {
        log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    }
    
    if PGPASSWORD=$DB_PASSWORD psql -h 127.0.0.1 -U "$DB_USER" -d "$DB_NAME" -c "SELECT COUNT(*) FROM screens;" &>/dev/null; then
        log_info "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!"
        log_info "üìä –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏"
    else
        log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_info() {
    source .env 2>/dev/null || {
        log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    }
    
    echo
    log_info "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"
    echo "   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_NAME"
    echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $DB_USER"
    echo "   –•–æ—Å—Ç: $DB_HOST"
    echo "   –ü–æ—Ä—Ç: $DB_PORT"
    echo
    echo "üîê –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:"
    echo "   - aether-db.env (–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)"
    echo "   - .env (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"
    echo
    echo "üöÄ –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
    echo "   psql -h $DB_HOST -U $DB_USER -d $DB_NAME"
    echo
    echo "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ:"
    echo "   PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -c \"SELECT name, slug FROM screens;\""
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ THE LAST SIBERIA UI Database..."
    
    check_root
    check_os
    install_postgresql
    setup_database
    verify_installation
    show_info
    
    log_info "–ì–æ—Ç–æ–≤–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è THE LAST SIBERIA UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "recreate")
        log_info "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        ;;
    "cleanup")
        log_info "–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        sudo -u postgres psql -c "DROP DATABASE IF EXISTS aether_ui_db;"
        sudo -u postgres psql -c "DROP USER IF EXISTS aether_user;"
        rm -f aether-db.env .env
        log_info "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        exit 0
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  recreate  - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
        echo "  cleanup   - –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        exit 0
        ;;
    *)
        main
        ;;
esac
